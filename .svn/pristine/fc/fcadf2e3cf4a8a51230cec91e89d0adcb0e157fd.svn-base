devtools::load_all(".")
exiftool <- system2('which', args='exiftool', stdout=TRUE)
devtools::load_all(".")
get(EXIFTOOL, envir=.pkgOptions)
assign("EXIFTOOL", NULL, envir=.pkgOptions)
get(EXIFTOOL, envir=.pkgOptions)
exiftool <- system2('which', args='exiftool', stdout=TRUE)
if('status' %in% names(attributes(exiftool))) { # if system2 returns an error code different than 0 (normal completion), then EXIFTOOL has a 'status' attribute.
stop("Error: exiftool not found. Please check and install it.")
} else {
assign("EXIFTOOL", exiftool, envir=.pkgOptions)
}
get(EXIFTOOL, envir=.pkgOptions)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
.createCatalog()
View(catalogData)
View(get(catalogData, envir=.pkgOptions))
View(get("catalogData", envir=.pkgOptions))
library(cameratraps)
?options
devtools::load_all(".")
getRepository()
setRepository('/lan/archivio/Camera traps/RAC Adda/')
getRepository()
list.dirs(getRepository())
?list.files
list.dirs(getRepository(),full.names=FALSE)
devtools::load_all(".")
.listDirs()
.listDirs()
source('/data/RData/cameratraps/R/parse_catalog.R', echo=TRUE)
.listDirs()
getRepository()
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listDirs()
devtools::load_all(".")
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listDirs()
devtools::load_all(".")
getRepository()
.listDirs()
?stopifnot
is.null(getRepository())
devtools::load_all(".")
.listDirs()
devtools::load_all(".")
.listDirs()
is.null(getRepository())
stopifnot(!is.null(getRepository()))
devtools::load_all(".")
.listDirs()
devtools::load_all(".")
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listDirs()
dirs <- .listDirs()
grep(dirs)
?grep
grep("@", dirs)
grep("^@", dirs)
grep("!^@", dirs)
grep("^@", dirs)
devtools::load_all(".")
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listDirs()
dirs <- dirs[!dirs %in% grep("^@", dirs)]
grep("^@", dirs)
dirs <- dirs[-grep("^@", dirs)]
dirs <- c( "@usususus", dirs, "@yadda")
dirs
grep("^@", dirs)
dirs <- dirs[-grep("^@", dirs)]
dirs
dirs[1]
grep("", dirs)
devtools::load_all(".")
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listDirs()
devtools::load_all(".")
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listDirs()
rm(dirs)
.listDirs()
dirs <- list.dirs(path=getRepository(), full.names=FALSE)
dirs <- dirs[-1] # first item is an empty string
dirs <- dirs[-grep("^@", dirs)]
return(dirs)
.listDirs <- function() {
dirs <- list.dirs(path=getRepository(), full.names=FALSE)
dirs <- dirs[-1] # first item is an empty string
# exclude directories whose name begins with "@"
dirs <- dirs[-grep("^@", dirs)]
return(dirs)
}
.listDirs()
library(cameratraps)
rm(parseCameraDir())
rm(parseCameraDir
)
rm(parseSiteDir)
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listDirs()
devtools::load_all(".")
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listSiteDir()
.listDirs(getRepository())
devtools::load_all(".")
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listDirs(getRepository())
.listDirs(path=getRepository())
.listDirs()
.listDirs
library(cameratraps)
setRepository('/lan/archivio/Camera traps/RAC Adda/')
.listDirs()
.listDirs
library(cameratraps)
.listDirs
devtools::load_all(".")
library(cameratraps)
.listDirs
rmarkdown::shiny_prerendered_clean('R/parse_catalog.R')
library(cameratraps)
cameratraps::.listSiteDir()
library(cameratraps)
listSiteDir()
setRepository('/lan/archivio/Camera traps/RAC Adda/')
listSiteDir()
.listDirs(getRepository())
.listDirs(path-getRepository())
.listDirs(path=getRepository())
rm(list=ls())
.libPaths()
devtools::load_all(".")
getRepository()
setRepository('/lan/archivio/Camera traps/RAC Adda/')
getRepository()
.listSiteDir()
devtools::load_all(".")
getRepository()
setRepository('/lan/archivio/Camera traps/RAC Adda/')
getRepository()
.listSiteDir()
.listSiteDir
.listDirs
?rm
rm(".listDirs", envir=cameratraps)
rm(".listDirs", envir=package:cameratraps)
detach("package:cameratraps", unload=TRUE)
devtools::load_all(".")
.listDirs
